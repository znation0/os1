Q1)
#include <stdio.h>

int main() {
    int n, ref_len, i, j;
    printf("Enter number of frames: ");
    scanf("%d", &n);

    int frames[n], counter[n];
    for (i = 0; i < n; i++) {
        frames[i] = -1;
        counter[i] = 0;
    }

    int reference[] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};
    ref_len = sizeof(reference) / sizeof(reference[0]);

    int page_faults = 0, time = 0;

    printf("\nPage\tFrames\n");
    for (i = 0; i < ref_len; i++) {
        int page = reference[i], found = 0;
        time++;

        for (j = 0; j < n; j++) {
            if (frames[j] == page) {
                counter[j] = time;
                found = 1;
                break;
            }
        }

        if (!found) {
            page_faults++;

            int empty_index = -1;
            for (j = 0; j < n; j++) {
                if (frames[j] == -1) {
                    empty_index = j;
                    break;
                }
            }

            if (empty_index != -1) {
                frames[empty_index] = page;
                counter[empty_index] = time;
            } else {
                int lru_index = 0, min_time = counter[0];
                for (j = 1; j < n; j++) {
                    if (counter[j] < min_time) {
                        min_time = counter[j];
                        lru_index = j;
                    }
                }
                frames[lru_index] = page;
                counter[lru_index] = time;
            }
        }

        printf("%d\t", page);
        for (j = 0; j < n; j++) {
            if (frames[j] != -1)
                printf("%d ", frames[j]);
            else
                printf("- ");
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", page_faults);
    return 0;
}


Q2)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>

void make_toks(char *s, char *tok[]) {
    int i = 0;
    char *p = strtok(s, " \n");
    while (p != NULL) {
        tok[i++] = p;
        p = strtok(NULL, " \n");
    }
    tok[i] = NULL;
}

void list_files(char *dirname) {
    DIR *d = opendir(dirname);
    if (!d) {
        printf("Directory not found: %s\n", dirname);
        return;
    }
    struct dirent *entry;
    while ((entry = readdir(d)) != NULL) {
        if (entry->d_type == DT_REG)
            printf("%s\n", entry->d_name);
    }
    closedir(d);
}

void list_count(char *dirname) {
    DIR *d = opendir(dirname);
    if (!d) {
        printf("Directory not found: %s\n", dirname);
        return;
    }
    struct dirent *entry;
    int count = 0;
    while ((entry = readdir(d)) != NULL)
        count++;
    printf("Total entries: %d\n", count);
    closedir(d);
}

int main() {
    char cmd[200], *args[10];
    pid_t pid;

    while (1) {
        printf("myshell$ ");
        fgets(cmd, sizeof(cmd), stdin);
        make_toks(cmd, args);

        if (args[0] == NULL) continue;
        if (strcmp(args[0], "exit") == 0) break;

        if (strcmp(args[0], "list") == 0) {
            if (args[1] == NULL || args[2] == NULL) {
                printf("Usage: list f/n dirname\n");
            } else if (strcmp(args[1], "f") == 0) {
                list_files(args[2]);
            } else if (strcmp(args[1], "n") == 0) {
                list_count(args[2]);
            } else {
                printf("Invalid option. Use f or n\n");
            }
            continue;
        }

        pid = fork();
        if (pid == 0) {
            execvp(args[0], args);
            printf("Command not found.\n");
            exit(0);
        } else {
            wait(NULL);
        }
    }
    return 0;
}
