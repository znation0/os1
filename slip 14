Q1)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

void make_toks(char *s, char *tok[]) {
    int i = 0;
    char *p = strtok(s, " \n");
    while (p != NULL) {
        tok[i++] = p;
        p = strtok(NULL, " \n");
    }
    tok[i] = NULL;
}

void typeline_n(char *n_str, char *filename) {
    int n = atoi(n_str+1); // skip the '+' character
    FILE *fp = fopen(filename, "r");
    if (!fp) {
        printf("File not found: %s\n", filename);
        return;
    }
    char line[500];
    int count = 0;
    while (fgets(line, sizeof(line), fp) != NULL && count < n) {
        printf("%s", line);
        count++;
    }
    fclose(fp);
}

int main() {
    char cmd[200], *args[10];
    pid_t pid;

    while (1) {
        printf("myshell$ ");
        fgets(cmd, sizeof(cmd), stdin);
        make_toks(cmd, args);

        if (args[0] == NULL) continue;
        if (strcmp(args[0], "exit") == 0) break;

        if (strcmp(args[0], "typeline") == 0) {
            if (args[1] == NULL || args[2] == NULL) {
                printf("Usage: typeline +n filename\n");
            } else if (args[1][0] == '+') {
                typeline_n(args[1], args[2]);
            } else {
                printf("Invalid option. Use +n\n");
            }
            continue;
        }

        pid = fork();
        if (pid == 0) {
            execvp(args[0], args);
            printf("Command not found.\n");
            exit(0);
        } else {
            wait(NULL);
        }
    }
    return 0;
}


Q2)
#include <stdio.h>

int main() {
    int n, i, j, time = 0, completed = 0;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int at[n], bt[n], ct[n], tat[n], wt[n], flag[n];
    for(i = 0; i < n; i++) flag[i] = 0;

    printf("Enter arrival times: ");
    for(i = 0; i < n; i++) scanf("%d", &at[i]);

    printf("Enter burst times: ");
    for(i = 0; i < n; i++) scanf("%d", &bt[i]);

    printf("\nGantt Chart:\n");

    while(completed < n) {
        int idx = -1;
        int min_bt = 100000; // a large number
        for(i = 0; i < n; i++) {
            if(flag[i]==0 && at[i] <= time && bt[i] < min_bt) {
                min_bt = bt[i];
                idx = i;
            }
        }

        if(idx == -1) { 
            time++; 
            continue; 
        }

        printf("| P%d (%d-%d) ", idx+1, time, time+bt[idx]);
        time += bt[idx];
        ct[idx] = time;
        tat[idx] = ct[idx] - at[idx];
        wt[idx] = tat[idx] - bt[idx];
        flag[idx] = 1;
        completed++;
    }
    printf("|\n");

    double total_wt = 0, total_tat = 0;
    printf("\nProcess\tAT\tBT\tWT\tTAT\n");
    for(i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\n", i+1, at[i], bt[i], wt[i], tat[i]);
        total_wt += wt[i];
        total_tat += tat[i];
    }

    printf("\nAverage Waiting Time: %.2f\n", total_wt/n);
    printf("Average Turnaround Time: %.2f\n", total_tat/n);

    return 0;
}

