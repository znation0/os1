Q1)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>

void make_toks(char *s, char *tok[]) {
    int i = 0;
    char *p = strtok(s, " \n");
    while (p != NULL) {
        tok[i++] = p;
        p = strtok(NULL, " \n");
    }
    tok[i] = NULL;
}

void list_files(char *dirname) {
    DIR *d = opendir(dirname);
    if (!d) {
        printf("Directory not found: %s\n", dirname);
        return;
    }
    struct dirent *entry;
    while ((entry = readdir(d)) != NULL) {
        if (entry->d_type == DT_REG)
            printf("%s\n", entry->d_name);
    }
    closedir(d);
}

int main() {
    char cmd[200], *args[10];
    pid_t pid;

    while (1) {
        printf("myshell$ ");
        fgets(cmd, sizeof(cmd), stdin);
        make_toks(cmd, args);

        if (args[0] == NULL) continue;
        if (strcmp(args[0], "exit") == 0) break;

        if (strcmp(args[0], "list") == 0 && args[1] != NULL && strcmp(args[1], "f") == 0 && args[2] != NULL) {
            list_files(args[2]);
            continue;
        }

        pid = fork();
        if (pid == 0) {
            execvp(args[0], args);
            printf("Command not found.\n");
            exit(0);
        } else {
            wait(NULL);
        }
    }
    return 0;
}


Q2)
#include <stdio.h>

int main() {
    int n, i, time = 0, completed = 0;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int at[n], bt[n], rt[n], ct[n], tat[n], wt[n];
    printf("Enter arrival times: ");
    for(i = 0; i < n; i++) scanf("%d", &at[i]);
    printf("Enter burst times: ");
    for(i = 0; i < n; i++) {
        scanf("%d", &bt[i]);
        rt[i] = bt[i]; // remaining time
    }

    int tq;
    printf("Enter time quantum: ");
    scanf("%d", &tq);

    int queue[100], front = 0, rear = 0, in_queue[n];
    for(i = 0; i < n; i++) in_queue[i] = 0;

    // enqueue first arrived process(es)
    for(i = 0; i < n; i++) {
        if(at[i] <= time && !in_queue[i]) {
            queue[rear++] = i;
            in_queue[i] = 1;
        }
    }

    printf("\nGantt Chart:\n");
    while(completed < n) {
        if(front == rear) { // queue empty, advance time
            time++;
            for(i = 0; i < n; i++) {
                if(at[i] <= time && !in_queue[i]) {
                    queue[rear++] = i;
                    in_queue[i] = 1;
                }
            }
            continue;
        }

        int idx = queue[front++];
        int exec_time = (rt[idx] < tq) ? rt[idx] : tq;
        printf("| P%d (%d-%d) ", idx+1, time, time+exec_time);
        time += exec_time;
        rt[idx] -= exec_time;

        // enqueue new arrived processes
        for(i = 0; i < n; i++) {
            if(at[i] <= time && !in_queue[i]) {
                queue[rear++] = i;
                in_queue[i] = 1;
            }
        }

        if(rt[idx] > 0) queue[rear++] = idx; // re-add if not finished
        else {
            ct[idx] = time;
            completed++;
        }
    }
    printf("|\n");

    double total_wt = 0, total_tat = 0;
    printf("\nProcess\tAT\tBT\tWT\tTAT\n");
    for(i = 0; i < n; i++) {
        tat[i] = ct[i] - at[i];
        wt[i] = tat[i] - bt[i];
        printf("P%d\t%d\t%d\t%d\t%d\n", i+1, at[i], bt[i], wt[i], tat[i]);
        total_wt += wt[i];
        total_tat += tat[i];
    }

    printf("\nAverage Waiting Time: %.2f\n", total_wt/n);
    printf("Average Turnaround Time: %.2f\n", total_tat/n);

    return 0;
}
