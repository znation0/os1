Q1)
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>

int main() {
    pid_t pid;
    int ret;

    pid = fork();

    if (pid < 0) {
        printf("Fork failed.\n");
        return 1;
    } 
    else if (pid == 0) {
        printf("Child Process (PID=%d) before nice\n", getpid());
        ret = nice(-5);
        if (ret == -1 && errno != 0) perror("nice");
        else printf("Child Process (PID=%d) new nice value: %d\n", getpid(), ret);
        for(int i = 0; i < 5; i++) {
            printf("Child process running...\n");
            sleep(1);
        }
    } 
    else {
        printf("Parent Process (PID=%d)\n", getpid());
        for(int i = 0; i < 5; i++) {
            printf("Parent process running...\n");
            sleep(1);
        }
        wait(NULL);
    }

    return 0;
}


Q2)
#include <stdio.h>

typedef struct {
    int pid, at, bt, pr, ct, tat, wt;
} Process;

int main() {
    int n, i, completed = 0, time = 0;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];
    int flag[n];
    for(i = 0; i < n; i++) flag[i] = 0;

    printf("Enter arrival time, burst time, priority (lower number = higher priority):\n");
    for(i = 0; i < n; i++) {
        p[i].pid = i+1;
        scanf("%d %d %d", &p[i].at, &p[i].bt, &p[i].pr);
        p[i].ct = 0; p[i].tat = 0; p[i].wt = 0;
    }

    printf("\nGantt Chart:\n");
    while(completed < n) {
        int idx = -1, highest_pr = 100000;
        for(i = 0; i < n; i++) {
            if(flag[i] == 0 && p[i].at <= time && p[i].pr < highest_pr) {
                highest_pr = p[i].pr;
                idx = i;
            }
        }

        if(idx == -1) {
            time++;
            continue;
        }

        printf("| P%d (%d-%d) ", p[idx].pid, time, time + p[idx].bt);
        time += p[idx].bt;
        p[idx].ct = time;
        p[idx].tat = p[idx].ct - p[idx].at;
        p[idx].wt = p[idx].tat - p[idx].bt;
        flag[idx] = 1;
        completed++;
    }
    printf("|\n");

    double total_wt = 0, total_tat = 0;
    printf("\nProcess\tAT\tBT\tPriority\tWT\tTAT\n");
    for(i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].pr, p[i].wt, p[i].tat);
        total_wt += p[i].wt;
        total_tat += p[i].tat;
    }

    printf("\nAverage Waiting Time: %.2f\n", total_wt/n);
    printf("Average Turnaround Time: %.2f\n", total_tat/n);

    return 0;
}
